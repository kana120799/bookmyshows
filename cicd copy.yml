name: CI/CD Pipeline

on:
  pull_request:
    branches:
      - main

# Concurrency control to prevent overlapping runs
# only one workflow runs at a time for a given pull request. This cancels or queues subsequent runs until the current one finishes.
# With cancel-in-progress: true, older runs are canceled when a new commit triggers a run, ensuring only the latest commit is processed.
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: 20

jobs:
  check-connections:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Vercel CLI
        uses: actions/cache@v3
        id: cache-vercel
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-vercel-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-vercel-

      - name: Install Vercel CLI
        if: steps.cache-vercel.outputs.cache-hit != 'true'
        run: npm install --global vercel@latest
        env:
          NPM_CONFIG_PREFIX: ~/.npm-global

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Cache Prisma Client
        uses: actions/cache@v3
        id: cache-prisma
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Test PostgreSQL Connection
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          npx prisma db pull --force
          echo "PostgreSQL connection successful"

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Test Redis Connection
        run: |
          echo "Testing Redis connection..."
          redis-cli -h ${{ secrets.REDIS_HOST }} -p ${{ secrets.REDIS_PORT }} -a ${{ secrets.REDIS_PASSWORD }} ping

  deploy:
    needs: check-connections
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache Vercel CLI
        uses: actions/cache@v3
        id: cache-vercel
        with:
          path: ~/.npm-global
          key: ${{ runner.os }}-vercel-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-vercel-

      - name: Install Vercel CLI
        if: steps.cache-vercel.outputs.cache-hit != 'true'
        run: npm install --global vercel@latest
        env:
          NPM_CONFIG_PREFIX: ~/.npm-global

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Cache Prisma Client
        uses: actions/cache@v3
        id: cache-prisma
        with:
          path: node_modules/.prisma
          key: ${{ runner.os }}-prisma-${{ hashFiles('prisma/schema.prisma') }}
          restore-keys: |
            ${{ runner.os }}-prisma-

      - name: Generate Prisma Client
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: npx prisma generate

      - name: Build Project
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

  # :::::::::::::::::::::::::::::::::      :::::::::::::::::::::::::::::::::::::::::::
  # :::::::::::::::::::::::::::::::::   pipeline version 1 :::::::::::::::::::::::::::::::::::::::::::
  # :::::::::::::::::::::::::::::::::      :::::::::::::::::::::::::::::::::::::::::::
# name: CI/CD Pipeline

# on:
#   pull_request:
#     branches:
#       - main

# env:
#   VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
#   VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
#   NODE_VERSION: 20

# jobs:
#   check-connections:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: "npm"

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Vercel CLI
#         run: npm install --global vercel@latest

#       - name: Pull Vercel Environment
#         run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

#       - name: Test PostgreSQL Connection
#         env:
#           DATABASE_URL: ${{ secrets.DATABASE_URL }}
#         run: |
#           npx prisma db pull --force
#           echo "PostgreSQL connection successful"

#       - name: Install Redis CLI
#         run: |
#           sudo apt-get update
#           sudo apt-get install -y redis-tools

#       - name: Test Redis Connection
#         run: |
#           echo "Testing Redis connection..."
#           redis-cli -h ${{ secrets.REDIS_HOST }} -p ${{ secrets.REDIS_PORT }} -a ${{ secrets.REDIS_PASSWORD }} ping

#   deploy:
#     needs: check-connections
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
#           cache: "npm"

#       - name: Install dependencies
#         run: npm ci

#       - name: Install Vercel CLI
#         run: npm install --global vercel@latest

#       - name: Pull Vercel Environment
#         run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

#       - name: Generate Prisma Client
#         run: npx prisma generate

#       - name: Build Project
#         run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

#       - name: Deploy to Vercel
#         run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}

